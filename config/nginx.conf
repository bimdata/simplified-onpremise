
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  /var/log/nginx/access.log  main;

    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        '' $scheme;
    }
    map $http_x_forwarded_host $proxy_x_forwarded_host {
        default $http_x_forwarded_host;
        '' $host;
    }
    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
    # server port the client connected to
    map $http_x_forwarded_port $proxy_x_forwarded_port {
        default $http_x_forwarded_port;
        '' $server_port;
    }
    # If the request from the downstream client has an "Upgrade:" header (set to any
    # non-empty value), pass "Connection: upgrade" to the upstream (backend) server.
    # Otherwise, the value for the "Connection" header depends on whether the user
    # has enabled keepalive to the upstream server.
    map $http_upgrade $proxy_connection {
        default upgrade;
        '' $proxy_connection_noupgrade;
    }
    map $upstream_keepalive $proxy_connection_noupgrade {
        # Preserve nginx's default behavior (send "Connection: close").
        default close;
        # Use an empty string to cancel nginx's default behavior.
        true '';
    }
    # Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
    map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
        default off;
        https on;
    }

    server_tokens off;

    client_max_body_size 4g;

    # set DNS resolver as Docker internal DNS
    resolver 127.0.0.11 valid=10s;
    resolver_timeout 5s;

    # Gzip config
    gzip on;
    gzip_comp_level 4;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types application/atom+xml application/javascript application/x-javascript application/json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/javascript text/plain text/x-component;
    gzip_proxied any;
    gzip_vary on;

    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header Proxy "";

    proxy_connect_timeout       20m;
    proxy_send_timeout          20m;
    proxy_read_timeout          20m;
    send_timeout                20m;

    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;

    upstream api {
        server api:8000 resolve;
        keepalive 2;
        # Need to setup the zone in the shm for the resolve to work
        zone up_api 256k;
    }

    server {
        listen       80 default_server;
        server_name  localhost;

        location /storage/ {
            alias /var/www/static/api_storage/;

            sendfile on;

            add_header 'Access-Control-Allow-Origin' '*';
            # Preflighted requests
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin'  '*';
                add_header 'Access-Control-Allow-Methods' 'OPTIONS, HEAD, GET';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
                return 204;
            }
        }

        location / {
            proxy_pass http://api;
            set $upstream_keepalive true;
        }

        location /health {
            return 401;
        }
    }
}

